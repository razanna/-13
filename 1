#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_ITER 10

int counter = 0;
pthread_mutex_t mutex;
pthread_cond_t cond;
int ready = 0;

void* thread_func1(void* arg) {
    for (int i = 0; i < NUM_ITER; i++) {
        pthread_mutex_lock(&mutex);
        counter++;
        printf("Thread 1 incremented counter to %d\n", counter);
        ready = 1;
        pthread_cond_signal(&cond);
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void* thread_func2(void* arg) {
    for (int i = 0; i < NUM_ITER; i++) {
        pthread_mutex_lock(&mutex);
        while (!ready) {
            pthread_cond_wait(&cond, &mutex);
        }
        printf("Thread 2 sees counter = %d\n", counter);
        ready = 0;
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond, NULL);

    pthread_create(&t1, NULL, thread_func1, NULL);
    pthread_create(&t2, NULL, thread_func2, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond);

    return 0;
}
